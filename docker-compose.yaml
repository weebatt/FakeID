services:
  postgres:
    image: postgres:latest
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_DB=auth_service
    volumes:
      - postgres-data:/var/lib/postgresql/data

    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    platform: linux/amd64
    expose:
      - "8080"
    environment:
      - DB_HOST=postgres
      - REDIS_ADDR=redis
      - JWT_SECRET=${JWT_SECRET}
    env_file:
      - auth-service/.env
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  nginx:
    image: nginx:latest
    ports:
      - "443:443"
    volumes:
      - ./api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - api-gateway
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    platform: linux/amd64
    expose:
      - "8080"
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:8080
    networks:
      - app-network
    depends_on:
      - auth-service
    restart: unless-stopped
  
  frontend:
    build:
      context: ./frontend # Путь к директории с фронтендом
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local